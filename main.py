import datetime

import telebot
from telebot.types import Message, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from utils import *
from sql_database import *
from configs import *
import logging

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename='logs.txt',
    filemode="a"
)

bot = telebot.TeleBot(get_bot_token())

create_databases()
logging.info("–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")


def create_reply_keyboard(buttons_list: list) -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(*buttons_list)
    return keyboard


def create_inline_keyboard(buttons_dict: dict) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup()
    for button_text, callback_data in buttons_dict.items():
        button = InlineKeyboardButton(text=button_text, callback_data=callback_data)
        keyboard.add(button)
    return keyboard


@bot.message_handler(commands=['start'])
def start_bot(message: Message):
    bot.send_message(message.from_user.id,
                     f"–ú–∞–º, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–µ –¥–ª—è –±–æ—Ç–∞, –µ–≥–æ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –í –æ–±—â–µ–º —Ç–æ, —á—Ç–æ —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –∫–æ–≥–¥–∞ —Ç–≤–æ–π –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start.")
    if not check_user_exists(message.from_user.id):
        add_user(message.from_user.id,
                 [message.from_user.username, None, datetime.datetime.now().strftime('%d-%m-%Y %H:%M:%S'), None])


@bot.message_handler(commands=['help'])
def send_help(message: Message):
    logging.info(f'{message.from_user.username} –æ–±—Ä–∞—Ç–∏–ª—Å—è –∑–∞ –ø–æ–º–æ—â—å—é')
    bot.send_message(message.from_user.id,
                     '–¢—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–º–æ—â–∏, –Ω–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –µ–≥–æ –Ω–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_question —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.')


@bot.message_handler(commands=['add_question'])
def add_new_question(message: Message):
    bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:")
    bot.register_next_step_handler(message, help_user)


def help_user(message: Message):
    add_question(message.from_user.id, [message.text, '–ù–µ —Ä–µ—à—ë–Ω', None, None])
    bot.reply_to(message, '–ü–æ–º–æ—â–Ω–∏–∫ –≤ –ø—É—Ç–∏!')
    for admin in admins_id:
        bot.send_message(admin,
                         f"{message.from_user.username} –ø–æ–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å: '{message.text}'\n –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /admin_help_user —á—Ç–æ–±—ã –ø–æ–º–æ—á—å.")
    return


@bot.message_handler(commands=['admin_help_user'])
def send_admin_help(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if int(message.from_user.id) not in admins_id:
        bot.send_message(message.from_user.id,
                         "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. "
                         "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.")
        return
    total_questions = 0
    questions = return_all_questions()
    for question in questions:
        if question[3] == '–ù–µ —Ä–µ—à—ë–Ω':
            total_questions += 1
            keyboard = create_inline_keyboard({"–Ø –æ—Ç–≤–µ—á—É!": question[0]})
            bot.send_message(message.from_user.id, f'–í–æ–ø—Ä–æ—Å –æ—Ç {question[1]}: {question[2]}', reply_markup=keyboard)
        elif question[3] == '–†–µ—à–∞–µ—Ç—Å—è' and question[4] == message.from_user.id:
            bot.send_message(message.from_user.id,
                             f"–ü—Ä–æ–¥–æ–ª–∂–∏ –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {question[2]}\n–û—Ç–≤–µ—Ç –ø–∏—à–∏ —Å—Ä–∞–∑—É –∏ –µ–¥–∏–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
            bot.register_next_step_handler(message, send_admins_help)
    if total_questions == 0:
        bot.send_message(message.from_user.id, "–í—Å—ë —Ö–æ—Ä–æ—à–æ, –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç.")


def send_admins_help(message: Message):
    questions = return_all_questions()
    for question in questions:
        if question[3] == '–†–µ—à–∞–µ—Ç—Å—è' and message.from_user.id == int(question[4]):
            question_id, user_id, user_question, status, responding_admin, admin_answer = question
            update_value('questions', 'status', 'status', user_id=user_id, individual_value='–†–µ—à–∞–µ—Ç—Å—è',
                         new_column_value="–†–µ—à—ë–Ω")
            update_value('questions', 'admin_answer', 'admin_answer', user_id=user_id, individual_value=None,
                         new_column_value=message.text)
            bot.send_message(user_id,
                             f'–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ç–≤–µ—Ç–∏–ª: {message.text}\n–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–º–æ–≥, —Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –µ—â—ë —Ä–∞–∑ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–Ω–∞–¥—ã /add_question')
        else:
            bot.send_message(message.from_user.id, "–ü—Ä–∏–Ω–æ—à—É –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –∫–∞–∫–∞—è-—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ ü§∑")
            logging.error(f'send_admins_help: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞.')
        return


@bot.callback_query_handler(func=lambda call: True)
def callback_help(call):
    question_id, user_id, user_question, status, responding_admin, admin_answer = return_question_by_id(call.data)
    if status == "–†–µ—à–∞–µ—Ç—Å—è" and call.from_user.id != responding_admin:
        bot.send_message(call.from_user.id, "–í–æ–ø—Ä–æ—Å —É–∂–µ —Ä–µ—à–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º, –æ—Ç–ª–∏—á–Ω–æ!")
        return

    elif status == "–†–µ—à—ë–Ω":
        bot.send_message(call.from_user.id, "–î—Ä—É–≥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —É–∂–µ —Ä–µ—à–∏–ª –≤–æ–ø—Ä–æ—Å, –æ—Ç–ª–∏—á–Ω–æ!")
        return

    update_value('questions',
                 'status',
                 'question_id',
                 user_id=user_id,
                 individual_value=question_id,
                 new_column_value='–†–µ—à–∞–µ—Ç—Å—è')

    update_value('questions',
                 'responding_admin',
                 'question_id',
                 user_id=user_id,
                 individual_value=question_id,
                 new_column_value=call.from_user.id)
    try:
        admins_id.remove(call.from_user.id)
    except ValueError:
        logging.error('–ù—É –±–ª—è, —Ç—É—Ç —è —É–∂–µ —Å–¥–∞—é—Å—å. –ß–µ—Å—Ç–Ω–æ - –Ω–∏—Ö–µ—Ä–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤ —Å–≤–æ–µ–º –∫–æ–¥–µ, –∏ –¥–∞–∂–µ —Ç–æ–æ–æ–æ—á–Ω–æ'
                      ' –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –æ—Ç–∫—É–¥–∞ —É –º–µ–Ω—è –∑–¥–µ—Å—å –æ—à–∏–±–∫–∞. –ï—Å–ª–∏ –æ–Ω–∞ –±—É–¥–µ—Ç, —è —É–π–¥—É –Ω–∞—Ñ–∏–≥ –∏–∑ —ç—Ç–æ–π –∫–æ–Ω—Ç–æ—Ä—ã.')
    try:
        for admin in admins_id:
            bot.send_message(admin, f'{call.from_user.id} –Ω–∞—á–∞–ª –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ "{user_question}"')
    except Exception as e:
        logging.error(f'callback_help: {e}')
    admins_id.append(call.from_user.id)
    bot.send_message(call.from_user.id, "–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n–û—Ç–≤–µ—Ç –ø–∏—à–∏ —Å—Ä–∞–∑—É –∏ –µ–¥–∏–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    logging.info(f'{call.from_user.username} –Ω–∞—á–∞–ª –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å id {question_id}')
    bot.register_next_step_handler_by_chat_id(call.from_user.id, send_admins_help)


if __name__ == '__main__':
    bot.polling()
    logging.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ')
